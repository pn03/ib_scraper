{
  "hasImages": false,
  "contentHTML": "<html><head></head><body><h4>Reverse Level Order</h4><div><strong>Time:14:01</strong><br><strong>Score:249</strong></div><br>                      <p><strong>Problem Description</strong><br></p><div id=\"problem_description_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Given a binary tree, return the <strong>reverse level order traversal</strong> of its nodes values. (i.e, from left to right and from last level to starting level).</p></div><br><br><strong>Problem Constraints</strong><br><div id=\"problem_constraints_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>1 &lt;= number of nodes &lt;= 5 * 10<sup>5</sup></p><p></p><p></p><p></p><p></p><p>1 &lt;= node value &lt;= 10<sup>5</sup></p><p></p><p></p><p></p><p></p></div><br><br><strong>Input Format</strong><br><div id=\"input_format_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>First and only argument is a pointer to the root node of the Binary Tree, A.</p></div><br><br><strong>Output Format</strong><br><div id=\"output_format_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Return an integer array denoting the reverse level order traversal from left to right.</p></div><br><br><strong>Example Input</strong><br><div id=\"example_input_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Input 1:</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><pre>    3   / \\  9  20    /  \\   15   7</pre><p>Input 2:</p><pre>   1  / \\ 6   2    /   3</pre><p></p><p></p><p></p><p></p><p></p><p></p><p></p></div><br><br><strong>Example Output</strong><br><div id=\"example_output_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Output 1:</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><pre> [15, 7, 9, 20, 3] </pre><p>Output 2:</p><pre> [3, 6, 2, 1]</pre><p></p><p></p><p></p><p></p><p></p><p></p><p></p></div><br><br><strong>Example Explanation</strong><br><div id=\"example_explanation_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Explanation 1:</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><pre> Nodes as level 3 : [15, 7] Nodes at level 2: [9, 20] Nodes at level 1: [3] Reverse level order traversal will be: [15, 7, 9, 20, 3]</pre><p>Explanation 2:</p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><pre> Nodes as level 3 : [3] Nodes at level 2: [6, 2] Nodes at level 1: [1] Reverse level order traversal will be: [3, 6, 2, 1]</pre><p></p><p></p><p></p></div><br><br><p></p>                          <blockquote style=\"position:relative;\">                              <span style=\"font-weight: normal;margin: 12px;\">                                  <b>NOTE: </b>You only need to implement the given function. Do not read input, instead use the arguments to the function. Do not print the output, instead return values as specified.                                  Still have a doubt? Checkout <a href=\"/pages/sample_codes/\">Sample Codes</a> for more details.                              </span>                            <span class=\"fa fa-remove\" id=\"prob-hint-remove\" style=\"position:absolute;top:0;right:0;margin:12px;color:grey;\"></span>                          </blockquote>                    </body></html>",
  "problem_id": 12058,
  "problem_name": "Reverse Level Order",
  "problem_link": "https://www.interviewbit.com/problems/reverse-level-order/",
  "problem_score": 249,
  "time_to_solve": "14:01"
}