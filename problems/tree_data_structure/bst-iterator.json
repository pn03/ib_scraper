{
  "hasImages": false,
  "contentHTML": "<html><head></head><body><h4>BST Iterator</h4><div><strong>Time:39:18</strong><br><strong>Score:500</strong></div><br>                      <p>Implement an iterator over a binary search tree (BST). Your iterator will be initialized with the root node of a BST.</p><p>The first call to <code class=\"highlighter-rouge\">next()</code> will return the smallest number in BST. Calling <code class=\"highlighter-rouge\">next()</code> again will return the next smallest number in the BST, and so on.</p><blockquote>  <p><strong>Note:</strong> <code class=\"highlighter-rouge\">next()</code> and <code class=\"highlighter-rouge\">hasNext()</code> should run in average <code class=\"highlighter-rouge\">O(1)</code> time and uses <code class=\"highlighter-rouge\">O(h)</code> memory, where <code class=\"highlighter-rouge\">h</code> is the height of the tree.<br>Try to optimize the additional space complexity apart from the amortized time complexity.</p></blockquote>                          <blockquote style=\"position:relative;\">                              <span style=\"font-weight: normal;margin: 12px;\">                                  <b>NOTE: </b>You only need to implement the given function. Do not read input, instead use the arguments to the function. Do not print the output, instead return values as specified.                                  Still have a doubt? Checkout <a href=\"/pages/sample_codes/\">Sample Codes</a> for more details.                              </span>                            <span class=\"fa fa-remove\" id=\"prob-hint-remove\" style=\"position:absolute;top:0;right:0;margin:12px;color:grey;\"></span>                          </blockquote>                    </body></html>",
  "problem_id": 232,
  "problem_name": "BST Iterator",
  "problem_link": "https://www.interviewbit.com/problems/bst-iterator/",
  "problem_score": 500,
  "time_to_solve": "39:18"
}