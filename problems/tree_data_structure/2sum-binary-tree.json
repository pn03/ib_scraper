{
  "hasImages": false,
  "contentHTML": "<html><head></head><body><h4>2-Sum Binary Tree</h4><div><strong>Time:60:55</strong><br><strong>Score:400</strong></div><br>                      <p>Given a binary search tree T, where each node contains a positive integer, and an integer K, you have to find whether or not there exist two different nodes A and B such that A.value + B.value = K.</p><p>Return 1 to denote that two such nodes exist. Return 0, otherwise.</p><p><strong>Notes</strong></p><ul>  <li>Your solution should run in linear time and not take memory more than O(height of T).</li>  <li>Assume all values in BST are distinct.</li></ul><p><strong>Example :</strong></p><div class=\"highlighter-rouge\"><pre class=\"highlight\"><code>Input 1: T :       10         / \\        9   20K = 19Return: 1Input 2: T:        10         / \\        9   20K = 40Return: 0</code></pre></div>                          <blockquote style=\"position:relative;\">                              <span style=\"font-weight: normal;margin: 12px;\">                                  <b>NOTE: </b>You only need to implement the given function. Do not read input, instead use the arguments to the function. Do not print the output, instead return values as specified.                                  Still have a doubt? Checkout <a href=\"/pages/sample_codes/\">Sample Codes</a> for more details.                              </span>                            <span class=\"fa fa-remove\" id=\"prob-hint-remove\" style=\"position:absolute;top:0;right:0;margin:12px;color:grey;\"></span>                          </blockquote>                    </body></html>",
  "problem_id": 336,
  "problem_name": "2-Sum Binary Tree",
  "problem_link": "https://www.interviewbit.com/problems/2sum-binary-tree/",
  "problem_score": 400,
  "time_to_solve": "60:55"
}