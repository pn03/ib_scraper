{
  "hasImages": false,
  "contentHTML": "<html><head></head><body><h4>Snake Ladder Problem!</h4><div><strong>Time: 42:28</strong><br><strong>Score: 200</strong></div><br><br>                      <p><strong>Problem Description</strong><br></p><div id=\"problem_description_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Rishabh takes out his <a href=\"https://en.wikipedia.org/wiki/Snakes_and_Ladders\"><strong>Snakes and Ladders Game</strong></a>, stares the board and wonders: &quot;If I can always roll the die to whatever number I want, what would be the <strong>least number of rolls to reach the destination</strong>?&quot;</p><p></p><p></p><br><p><strong>RULES:</strong></p><br><ul><br><li>The game is played with cubic dice of <strong>6</strong> faces numbered from <strong>1</strong> to <strong>A</strong>.</li><br><li>Starting from  <strong>1</strong> , land on square <strong>100</strong> with the exact roll of the die. If moving the number rolled would place the player beyond square <strong>100</strong>, no move is made.</li><br><li>If a player lands at the base of a ladder, the player must climb the ladder. Ladders go up only.</li><br><li>If a player lands at the mouth of a snake, the player must go down the snake and come out through the tail. Snakes go down only.</li><br></ul><br><p><strong>BOARD DESCRIPTION:</strong></p><br><ul><br><li> The board is always <code>10 x 10</code>  with squares numbered from <strong>1</strong> to <strong>100</strong>.</li><br><li>The board contains <strong>N</strong> ladders given in a form of 2D matrix <strong>A</strong> of size <code>N * 2</code> where <strong>(A[i][0], A[i][1])</strong> denotes a ladder that has its base on square <strong>A[i][0]</strong> and end at square <strong>A[i][1]</strong>.</li><br><li> The board contains <strong>M</strong> snakes given in a form of 2D matrix <strong>B</strong> of size <code>M * 2</code> where <strong>(B[i][0], B[i][1])</strong> denotes a snake that has its mouth on square <strong>B[i][0]</strong> and tail at square <strong>B[i][1]</strong>.</li><br></ul><br><p></p><br><p></p><br><p></p></div><br><br><strong>Problem Constraints</strong><br><div id=\"problem_constraints_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>1 &lt;= N, M &lt;= 15</p><p></p><p></p><p></p><br><p>1 &lt;= A[i][0], A[i][1], B[i][0], B[i][1] &lt;= 100</p><br><p>A[i][0] &lt; A[i][1] and B[i][0] &gt; B[i][1]</p><br><p>Neither square <strong>1</strong> nor square <strong>100</strong> will be the starting point of a ladder or snake.</p><br><p>A square will have at most one endpoint from either a snake or a ladder.</p><br><p></p><br><p></p><br><p></p></div><br><br><strong>Input Format</strong><br><div id=\"input_format_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>First argument is a 2D matrix <strong>A</strong> of size <code>N * 2</code> where <strong>(A[i][0], A[i][1])</strong> denotes a ladder that has its base on square <strong>A[i][0]</strong> and end at square <strong>A[i][1]</strong>.</p><p></p><p></p><p></p><br><p>Second argument is a 2D matrix <strong>B</strong> of size <code>M * 2</code> where <strong>(B[i][0], B[i][1])</strong> denotes a snake that has its mouth on square <strong>B[i][0]</strong> and tail at square <strong>B[i][1]</strong>.</p><br><p></p><br><p></p><br><p></p></div><br><br><strong>Output Format</strong><br><div id=\"output_format_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Return the <strong>least number of rolls</strong> to move from start to finish on a separate line. If there is no solution, return <strong>-1</strong>.</p></div><br><br><strong>Example Input</strong><br><div id=\"example_input_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Input 1:</p><p></p><p></p><p></p><br><pre> A = [  [32, 62]<br>        [42, 68]<br>        [12, 98]<br>     ]<br> B = [  [95, 13]<br>        [97, 25]<br>        [93, 37]<br>        [79, 27]<br>        [75, 19]<br>        [49, 47]<br>        [67, 17]<br></pre><br><p>Input 2:</p><br><pre> A = [  [8, 52]<br>        [6, 80]<br>        [26, 42]<br>        [2, 72]<br>     ]<br> B = [  [51, 19]<br>        [39, 11]<br>        [37, 29]<br>        [81, 3]<br>        [59, 5]<br>        [79, 23]<br>        [53, 7]<br>        [43, 33]<br>        [77, 21] <br></pre><br><p></p><br><p></p><br><p></p></div><br><br><strong>Example Output</strong><br><div id=\"example_output_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Output 1:</p><p></p><p></p><p></p><br><pre> 3<br></pre><br><p>Output 2:</p><br><pre> 5<br></pre><br><p></p><br><p></p><br><p></p></div><br><br><strong>Example Explanation</strong><br><div id=\"example_explanation_markdown_content_value\" style=\"background-color: #f9f9f9; padding: 5px 10px; \"><p>Explanation 1:</p><p></p><p></p><p></p><br><pre> The player can roll a <strong>5</strong> and a <strong>6</strong> to land at square <strong>12</strong>. There is a ladder to square <strong>98</strong>. A roll of <strong>2</strong> ends the traverse in <strong>3</strong> rolls.<p></p><br><br><p></p></pre><br><p>Explanation 2:</p><br><pre> The player first rolls <strong>5</strong> and climbs the ladder to square <strong>80</strong>. Three rolls of <strong>6</strong> get to square <strong>98</strong>.<br> A final roll of <strong>2</strong> lands on the target square in <strong>5</strong> total rolls.<br></pre><br><p></p><br><p></p><br><p></p></div><br><br><p></p><br><br>                          <blockquote style=\"position:relative;\"><br>                              <span style=\"font-weight: normal;margin: 12px;\"><br>                                  <b>NOTE: </b>You only need to implement the given function. Do not read input, instead use the arguments to the function. Do not print the output, instead return values as specified.<br>                                  Still have a doubt? Checkout <a href=\"/pages/sample_codes/\">Sample Codes</a> for more details.<br>                              </span><br>                            <span class=\"fa fa-remove\" id=\"prob-hint-remove\" style=\"position:absolute;top:0;right:0;margin:12px;color:grey;\"></span><br>                          </blockquote><br><br>                    </body></html>",
  "problem_id": 11647,
  "problem_name": "Snake Ladder Problem!",
  "problem_link": "https://www.interviewbit.com/problems/snake-ladder-problem/",
  "problem_score": 200,
  "time_to_solve": "42:28"
}